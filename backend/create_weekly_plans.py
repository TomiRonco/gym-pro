#!/usr/bin/env python3
"""
Script para crear planes de membres√≠a basados en d√≠as por semana
"""
import sys
import os

# Agregar el directorio padre al path para importar los m√≥dulos
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from datetime import datetime, timedelta
from sqlalchemy.orm import sessionmaker
from app.database import engine
from app.models import MembershipPlan

# Crear sesi√≥n de base de datos
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)

def create_weekly_plans():
    """Crear planes de membres√≠a basados en d√≠as por semana"""
    db = SessionLocal()
    
    try:
        # Limpiar planes existentes
        db.query(MembershipPlan).delete()
        db.commit()
        
        # Definir los nuevos planes basados en d√≠as por semana
        plans_data = [
            {
                "name": "Plan 1 D√≠a Semanal",
                "description": "Acceso 1 d√≠a por semana al gimnasio. Ideal para principiantes o complemento de otras actividades.",
                "price": 8000.00,
                "days_per_week": 1,
                "features": '["Acceso 1 d√≠a por semana", "Uso de equipos b√°sicos", "Vestuarios"]'
            },
            {
                "name": "Plan 2 D√≠as Semanales", 
                "description": "Acceso 2 d√≠as por semana. Perfecto para mantener una rutina b√°sica de ejercicio.",
                "price": 15000.00,
                "days_per_week": 2,
                "features": '["Acceso 2 d√≠as por semana", "Uso de equipos b√°sicos", "Vestuarios", "Rutina personalizada"]'
            },
            {
                "name": "Plan 3 D√≠as Semanales",
                "description": "Acceso 3 d√≠as por semana. Ideal para rutinas de fuerza y cardio balanceadas.",
                "price": 22000.00,
                "days_per_week": 3,
                "features": '["Acceso 3 d√≠as por semana", "Uso completo de equipos", "Vestuarios", "Rutina personalizada", "Asesoramiento b√°sico"]'
            },
            {
                "name": "Plan 4 D√≠as Semanales",
                "description": "Acceso 4 d√≠as por semana. Para entrenamientos m√°s intensivos y constantes.",
                "price": 28000.00,
                "days_per_week": 4,
                "features": '["Acceso 4 d√≠as por semana", "Uso completo de equipos", "Vestuarios", "Rutina personalizada", "Asesoramiento t√©cnico"]'
            },
            {
                "name": "Plan 5 D√≠as Semanales",
                "description": "Acceso 5 d√≠as por semana. Perfecto para deportistas y entusiastas del fitness.",
                "price": 34000.00,
                "days_per_week": 5,
                "features": '["Acceso 5 d√≠as por semana", "Uso completo de equipos", "Vestuarios", "Rutina personalizada", "Asesoramiento t√©cnico", "Evaluaci√≥n f√≠sica mensual"]'
            },
            {
                "name": "Plan Libre (7 D√≠as)",
                "description": "Acceso completo todos los d√≠as de la semana. M√°xima flexibilidad para tu entrenamiento.",
                "price": 45000.00,
                "days_per_week": 7,
                "features": '["Acceso libre 7 d√≠as", "Uso completo de equipos", "Vestuarios", "Rutina personalizada", "Asesoramiento t√©cnico", "Evaluaci√≥n f√≠sica mensual", "Clases grupales incluidas"]'
            }
        ]
        
        # Crear los planes
        created_plans = []
        for plan_data in plans_data:
            plan = MembershipPlan(**plan_data)
            db.add(plan)
            created_plans.append(plan)
        
        # Guardar en la base de datos
        db.commit()
        
        print("‚úÖ Planes de membres√≠a basados en d√≠as por semana creados exitosamente:")
        print("-" * 80)
        
        for plan in created_plans:
            db.refresh(plan)
            print(f"üèãÔ∏è  {plan.name}")
            print(f"   üí∞ Precio: ${plan.price:,.0f}")
            print(f"   üìÖ D√≠as por semana: {plan.days_per_week}")
            print(f"   üìù {plan.description}")
            print()
        
        return created_plans
        
    except Exception as e:
        print(f"‚ùå Error al crear los planes: {e}")
        db.rollback()
        return []
        
    finally:
        db.close()

if __name__ == "__main__":
    print("üèãÔ∏è Creando planes de membres√≠a basados en d√≠as por semana...")
    print()
    
    plans = create_weekly_plans()
    
    if plans:
        print(f"üéâ Se crearon {len(plans)} planes exitosamente!")
        print()
        print("üí° Caracter√≠sticas del nuevo sistema:")
        print("   ‚Ä¢ Los planes se basan en d√≠as por semana (1-7 d√≠as)")
        print("   ‚Ä¢ El vencimiento es siempre a 1 mes de la fecha de inicio")
        print("   ‚Ä¢ Precios escalados seg√∫n la cantidad de d√≠as")
        print("   ‚Ä¢ Caracter√≠sticas espec√≠ficas para cada plan")
    else:
        print("‚ùå No se pudieron crear los planes")